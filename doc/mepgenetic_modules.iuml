namespace mep {
package genetic {

class Generator<Type> {
    +void register(FunctionPtr<Type>, double probability);
    +void register(Type terminal, double probability);
    +void register(GenePtr<Type>, double probability);
    +void reset();
    +GenePtr<Type> rand();
    -std::vector<pair<uint, GenePtr<Type>>> original_;
}
abstract class Fitness<Type> {
    +Fitness(Type reference);
    +void setReference(const Type &referece);
    +uint measure(const Type& type);
    -Type reference_;
}
class Population<Type> {
    +Population(uint size, Type reference);
    +void setReference(const Type &referece);
    +void init();
    +void run();
    +Chromosome<Type> reproduce();
    +Generator<Type> generator;
    +GeneticOperationGenerator<Type> generator;
    -GeneticSelectionPtr<Type> generator;
    -FitnessPtr<Type> fitness;
    -std::vector<Chromosome<Type>> population_;
    -uint size_;
}
package genetic_operation {
    PKG(GeneticOperationGenerator)
    PKG(GeneticOperation)
    package crossover {

    }
    package mutation {
        
    }
}
package selection {
    PKG(GeneticSelection)
}

}
}