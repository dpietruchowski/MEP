!include defines.iuml
namespace mep {
TYPEDEF(uint, "unsigned int")
TYPEDEF("FunctionPtr<Type>", "Type (*)(const vector<Type&>&")
package core {

abstract class Object {
    +Object(uint id);
    +Object(const Object&);
    +Object& operator=(const Object&);
    +virtual ~Object();
    +uint score() const;
    +uint id() const;
    +void assess(const Fitness&);
    +string write() const;
    -{abstract}uint assess(const Fitness&);
    -{abstract}void write(string&) const;
    -uint score_;
    -uint id_;
}

abstract class Gene<Type> {
    +Gene(uint id, uint nArgs);
    +void run(vector<Gene<Type>>&);
    +void clear();
    +bool isCleared() const;
    +{abstract} GenePtr clone() const;
    #Gene(const Gene&);
    #Gene& operator=(const Gene&);
    +uint nArgs() const;
    -{abstract}Type run(const vector<Type&>&);
    -virtual void write(string&) const;
    -Type result_;
    -uint nArgs_;
}

class Chromosome<Type> {
    +Chromosome(uint id, uint size_);
    +Chromosome(const Chromosome&);
    +Chromosome& operator=(const Chromosome&);
    +Chromosome(Chromosome&&);
    +Chromosome& operator=(Chromosome&&);
    +const Gene<Type>& operator[](uint idx);
    +Chromosome(const vector<Chromosome&>&,\n                 const vector<uint>& cutPoints);
    +void mutate(const Gene&, uint cutPoint);
    +void init(const Generator&);
    +void run();
    +void clear();
    +bool isCleared() const;
    +bool isAssessed() const;
    +bool isInitialize() const;
    +uint size() const;
    +Tree release();
    -uint assess(const Fitness&);
    -void write(string&);
    -bool is_runed_;
    -size_;
    -vector<Gene<Type>> genes_;
}
STRUCT(Chromosome::Gene)
class Chromosome::Gene<Type> {
    +GenePtr<Type> node;
    +unordered_set<uint> children;
}

TYPEDEF(GenePtr, "unique_ptr<Gene<Type>>")
class GenePtr<Type>

class FunctionGene<Type> {
    +FunctionGene(uint id);
    +GenePtr clone() const;
    -void write(string&);
    -Type run(vector<Type>&);
    -FunctionPtr<Type> function_;
}
class TerminalGene<Type> {
    +TerminalGene(uint id);
    +GenePtr clone() const;
    -void write(string&);
    -Type run(vector<Type>&);
    -Type terminal_;
}
class Tree<Type> {
    +Tree(uint id, Node root);
    +GenePtr clone() const;
    +void release();
    -void write(string&);
    +Chromosome<Type> release();
    -Node<Type> root_;
}

class Node<Type> {
    +Node(GenePtr);
    +Type run();
    +vector<Node<Type>> children;
    -GenePtr<Type> gene_
    -~Node();
}

}
}