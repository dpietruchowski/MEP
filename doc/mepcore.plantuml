@startuml
!include defines.iuml
!include typedefs.iuml

hide empty members

namespace mep {
package core {
    abstract class Object {
        +Object(uint id);
        +Object(const Object&);
        +Object& operator=(const Object&);
        +virtual ~Object();
        +uint score() const;
        +uint id() const;
        +void assess(const Fitness&);
        +string write() const;
        -{abstract}uint assessObject(const Fitness&);
        -{abstract}void writeObject(string&) const;
        -uint score_;
        -uint id_;
    }

    class Gene<Type> {
        -Operation<Type>* operation_;
        -vector<uint> children_;
        -Type result_;
        -bool isCleared_;
        __
        +Gene(uint id, Operation<Type>*);
        +Gene(const Gene&);
        +Gene& operator=(const Gene&);
        +Gene(const Gene&&);
        +Gene& operator=(const Gene&&);
        __
        +void run(const vector<Gene<Type>*>&);
        +bool addChild(uint idx)
        +const vector<uint>& children() const;
        +void clear();
        +bool isCleared() const;
        +uint nArgs() const;
        +const Type& result() const;
        #void writeObject(string&) const;
        #void writeShortObject(string&) const;
        -void assessObject(string&);
    }

    class Chromosome<Type> {
        -vector<Gene<Type>> genes_;
        __
        +Chromosome(uint id, uint size);
        +Chromosome(const Chromosome&);
        +Chromosome& operator=(const Chromosome&);
        +Chromosome(Chromosome&&);
        +Chromosome& operator=(Chromosome&&);
        +const Gene<Type>& operator[](uint idx);
        __
        +void mutate(const Gene&, uint cutPoint);
        +void mutate(Gene&&, uint cutPoint);
        +void crossover(const vector<Chromosome*>& parents,\n                      const set<uint>& cutPoints);
        +void init(const Generator&);
        +void run(const Fitness&);
        +bool isFull() const;
        +uint size() const;
        +Tree release();
        #void writeObject(string&) const;
        #void writeShortObject(string&) const;
        -void clear();
        -void assessObject(string&);
    }

    Object <|-- Gene
    Object <|-- Chromosome
    Object --> uint
    Chromosome o-left- Gene: genes_
    Chromosome <-left- Gene: keeps idx to\n children
}

package types {
    FunctionPtr ..> Args
}

package operation {
    abstract class Operation<Type>
    Gene o-- Operation: raw pointer
    Operation ..> Args
}

package genetic {
    class OperationSet<Type>
    Gene --> OperationSet: owns operation_
    Operation --o OperationSet: owns
}
}

@enduml